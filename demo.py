# ===========================================
# 导入一些必要的包 ==> 初始化环境
from AIDetector_pytorch import Detector
import imutils
import cv2


# ===========================================

def main():
    # ==============
    # 定义展示窗口的名字
    name = 'demo'
    # ==============

    # ============
    # 定义检测器
    det = Detector()
    # ============

    # ====================================================
    # 关于 视频流数据的获取
    # 图片获取 <== 拆解为图片 <== 从OpenCV读入视频
    cap = cv2.VideoCapture('c.mp4')
    # 获取 视频帧率==>感觉 这些东西可以使用NoteBook进行一个详细的解释
    fps = int(cap.get(5))
    print('fps:', fps)
    t = int(1000 / fps)
    videoWriter = None
    # ====================================================

    # ================
    # 关于帧率的控制 参数
    i = 0
    # ================

    # ===============================================================
    # 开始对图片的迭代 处理
    while True:

        # =====================
        # 逐张地获取图片
        _, im = cap.read()
        # =====================

        # =================================================
        # 关于 视频处理的帧数 控制  与 图片的获取 成功与否的 判断
        i += 1
        if i % 2 != 0:
            continue
        if im is None:
            break
        # =================================================

        # ==========================
        # 将图片输入 分析器 并获取结果
        result_ = det.feedCap(im)
        # ==========================

        # ==========================================================
        # 获取 分析器 根据原图进行神经网络分析 得到的数据 进而 标注好的图片
        result = result_['frame']
        # ==========================================================

        # =======================================================================
        # 将图片 处理成指定的大小 ==> 展示的美观问题
        result = imutils.resize(result, height=500)
        # 关于图片 收集成 视频文件 进行存储
        if videoWriter is None:
            fourcc = cv2.VideoWriter_fourcc(
                'm', 'p', '4', 'v')  # opencv3.0
            videoWriter = cv2.VideoWriter(
                'result.mp4', fourcc, fps, (result.shape[1], result.shape[0]))
        videoWriter.write(result)
        # =======================================================================

        # ===========================
        # 关于处理好的图片的可视化
        cv2.imshow(name, result)
        cv2.waitKey(t)
        # ===========================

        # =======================================================================
        # 设置退出 展示 退出 处理的按钮  ==> 点 "x"  退出
        if cv2.getWindowProperty(name, cv2.WND_PROP_AUTOSIZE) < 1:
            # 点x退出
            break
        # =======================================================================

    # =======================================================================
    # 关于 视频流的 一些基础设置
    cap.release()
    videoWriter.release()
    cv2.destroyAllWindows()
    # =======================================================================


if __name__ == '__main__':
    main()